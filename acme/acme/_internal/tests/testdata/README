In order for acme.test_util._guess_loader to work properly, make sure
to use appropriate extension for vector filenames: .pem for PEM and
.der for DER.

The following command has been used to generate test keys:

  for k in 256 512 1024 2048 4096; do openssl genrsa -out rsa${k}_key.pem $k; done

and for the CSR:

  openssl req -key rsa2048_key.pem -new -subj '/CN=example.com' -outform DER > csr.der

and for the certificates:

  openssl req -key rsa2048_key.pem -new -subj '/CN=example.com' -x509 -outform DER > cert.der
  openssl req -key rsa2048_key.pem -new -subj '/CN=example.com' -x509 > rsa2048_cert.pem
  openssl req -key rsa1024_key.pem -new -subj '/CN=example.com' -x509 > rsa1024_cert.pem

and for the elliptic key curves:

  openssl genpkey -algorithm EC -out ec_secp384r1.pem -pkeyopt ec_paramgen_curve:P-384 -pkeyopt ec_param_enc:named_curve

`csr-mixed.pem` was generated with pyca/cryptography using the following snippet:

	from cryptography import x509
	from cryptography.hazmat.primitives import hashes, serialization
	k = serialization.load_pem_private_key(
	    open("./acme/acme/_internal/tests/testdata/rsa2048_key.pem", "rb").read(), None
	)
	csr = (
	    x509.CertificateSigningRequestBuilder().add_extension(
	        x509.SubjectAlternativeName([x509.DNSName('a.exemple.com'), x509.IPAddress(ipaddress.ipaddr('192.0.2.111'))]),
	        critical=False
	    ).subject_name(
	        x509.Name([])
	    ).sign(
	        k, hashes.SHA256()
	    )
	)
	open("./acme/acme/_internal/tests/testdata/csr-mixed.pem", "wb").write(
	    csr.public_bytes(serialization.Encoding.PEM)
	)

